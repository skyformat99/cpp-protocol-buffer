// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: product.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "product.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RFQ {
class ProductRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProductRequest>
     _instance;
} _ProductRequest_default_instance_;
class ProductResponseDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ProductResponse>
     _instance;
} _ProductResponse_default_instance_;

namespace protobuf_product_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequest, rfq_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequest, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequest, product_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequest, product_category_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductRequest, quantity_),
  1,
  2,
  3,
  0,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponse, unit_price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductResponse, price_validation_period_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(ProductRequest)},
  { 15, 22, sizeof(ProductResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProductRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ProductResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "product.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ProductRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProductRequest_default_instance_);_ProductResponse_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ProductResponse_default_instance_);}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rproduct.proto\022\003RFQ\"x\n\016ProductRequest\022\016"
      "\n\006rfq_id\030\001 \001(\005\022\022\n\naccount_id\030\002 \001(\005\022\026\n\016pr"
      "oduct_number\030\003 \001(\005\022\030\n\020product_category\030\004"
      " \001(\t\022\020\n\010quantity\030\005 \001(\005\"F\n\017ProductRespons"
      "e\022\022\n\nunit_price\030\001 \001(\002\022\037\n\027price_validatio"
      "n_period\030\002 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "product.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_product_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductRequest::kRfqIdFieldNumber;
const int ProductRequest::kAccountIdFieldNumber;
const int ProductRequest::kProductNumberFieldNumber;
const int ProductRequest::kProductCategoryFieldNumber;
const int ProductRequest::kQuantityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductRequest::ProductRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_product_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RFQ.ProductRequest)
}
ProductRequest::ProductRequest(const ProductRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  product_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_product_category()) {
    product_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_category_);
  }
  ::memcpy(&rfq_id_, &from.rfq_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&quantity_) -
    reinterpret_cast<char*>(&rfq_id_)) + sizeof(quantity_));
  // @@protoc_insertion_point(copy_constructor:RFQ.ProductRequest)
}

void ProductRequest::SharedCtor() {
  _cached_size_ = 0;
  product_category_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rfq_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&quantity_) -
      reinterpret_cast<char*>(&rfq_id_)) + sizeof(quantity_));
}

ProductRequest::~ProductRequest() {
  // @@protoc_insertion_point(destructor:RFQ.ProductRequest)
  SharedDtor();
}

void ProductRequest::SharedDtor() {
  product_category_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProductRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductRequest::descriptor() {
  protobuf_product_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_product_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProductRequest& ProductRequest::default_instance() {
  protobuf_product_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProductRequest* ProductRequest::New(::google::protobuf::Arena* arena) const {
  ProductRequest* n = new ProductRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProductRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RFQ.ProductRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_product_category()) {
    GOOGLE_DCHECK(!product_category_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*product_category_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&rfq_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quantity_) -
        reinterpret_cast<char*>(&rfq_id_)) + sizeof(quantity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProductRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RFQ.ProductRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rfq_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_rfq_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rfq_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_account_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 product_number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_product_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &product_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string product_category = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_product_category()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->product_category().data(), static_cast<int>(this->product_category().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RFQ.ProductRequest.product_category");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 quantity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_quantity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RFQ.ProductRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RFQ.ProductRequest)
  return false;
#undef DO_
}

void ProductRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RFQ.ProductRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rfq_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rfq_id(), output);
  }

  // optional int32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->account_id(), output);
  }

  // optional int32 product_number = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->product_number(), output);
  }

  // optional string product_category = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_category().data(), static_cast<int>(this->product_category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RFQ.ProductRequest.product_category");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->product_category(), output);
  }

  // optional int32 quantity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->quantity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RFQ.ProductRequest)
}

::google::protobuf::uint8* ProductRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RFQ.ProductRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rfq_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rfq_id(), target);
  }

  // optional int32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->account_id(), target);
  }

  // optional int32 product_number = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->product_number(), target);
  }

  // optional string product_category = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->product_category().data(), static_cast<int>(this->product_category().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RFQ.ProductRequest.product_category");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->product_category(), target);
  }

  // optional int32 quantity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->quantity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RFQ.ProductRequest)
  return target;
}

size_t ProductRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RFQ.ProductRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string product_category = 4;
    if (has_product_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->product_category());
    }

    // optional int32 rfq_id = 1;
    if (has_rfq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rfq_id());
    }

    // optional int32 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->account_id());
    }

    // optional int32 product_number = 3;
    if (has_product_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->product_number());
    }

    // optional int32 quantity = 5;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RFQ.ProductRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RFQ.ProductRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RFQ.ProductRequest)
    MergeFrom(*source);
  }
}

void ProductRequest::MergeFrom(const ProductRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RFQ.ProductRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_product_category();
      product_category_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.product_category_);
    }
    if (cached_has_bits & 0x00000002u) {
      rfq_id_ = from.rfq_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      product_number_ = from.product_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      quantity_ = from.quantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProductRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RFQ.ProductRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductRequest::CopyFrom(const ProductRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RFQ.ProductRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductRequest::IsInitialized() const {
  return true;
}

void ProductRequest::Swap(ProductRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductRequest::InternalSwap(ProductRequest* other) {
  using std::swap;
  product_category_.Swap(&other->product_category_);
  swap(rfq_id_, other->rfq_id_);
  swap(account_id_, other->account_id_);
  swap(product_number_, other->product_number_);
  swap(quantity_, other->quantity_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProductRequest::GetMetadata() const {
  protobuf_product_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_product_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductRequest

// optional int32 rfq_id = 1;
bool ProductRequest::has_rfq_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProductRequest::set_has_rfq_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ProductRequest::clear_has_rfq_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProductRequest::clear_rfq_id() {
  rfq_id_ = 0;
  clear_has_rfq_id();
}
::google::protobuf::int32 ProductRequest::rfq_id() const {
  // @@protoc_insertion_point(field_get:RFQ.ProductRequest.rfq_id)
  return rfq_id_;
}
void ProductRequest::set_rfq_id(::google::protobuf::int32 value) {
  set_has_rfq_id();
  rfq_id_ = value;
  // @@protoc_insertion_point(field_set:RFQ.ProductRequest.rfq_id)
}

// optional int32 account_id = 2;
bool ProductRequest::has_account_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProductRequest::set_has_account_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ProductRequest::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProductRequest::clear_account_id() {
  account_id_ = 0;
  clear_has_account_id();
}
::google::protobuf::int32 ProductRequest::account_id() const {
  // @@protoc_insertion_point(field_get:RFQ.ProductRequest.account_id)
  return account_id_;
}
void ProductRequest::set_account_id(::google::protobuf::int32 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:RFQ.ProductRequest.account_id)
}

// optional int32 product_number = 3;
bool ProductRequest::has_product_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ProductRequest::set_has_product_number() {
  _has_bits_[0] |= 0x00000008u;
}
void ProductRequest::clear_has_product_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void ProductRequest::clear_product_number() {
  product_number_ = 0;
  clear_has_product_number();
}
::google::protobuf::int32 ProductRequest::product_number() const {
  // @@protoc_insertion_point(field_get:RFQ.ProductRequest.product_number)
  return product_number_;
}
void ProductRequest::set_product_number(::google::protobuf::int32 value) {
  set_has_product_number();
  product_number_ = value;
  // @@protoc_insertion_point(field_set:RFQ.ProductRequest.product_number)
}

// optional string product_category = 4;
bool ProductRequest::has_product_category() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProductRequest::set_has_product_category() {
  _has_bits_[0] |= 0x00000001u;
}
void ProductRequest::clear_has_product_category() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProductRequest::clear_product_category() {
  product_category_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_product_category();
}
const ::std::string& ProductRequest::product_category() const {
  // @@protoc_insertion_point(field_get:RFQ.ProductRequest.product_category)
  return product_category_.GetNoArena();
}
void ProductRequest::set_product_category(const ::std::string& value) {
  set_has_product_category();
  product_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RFQ.ProductRequest.product_category)
}
#if LANG_CXX11
void ProductRequest::set_product_category(::std::string&& value) {
  set_has_product_category();
  product_category_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RFQ.ProductRequest.product_category)
}
#endif
void ProductRequest::set_product_category(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_product_category();
  product_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RFQ.ProductRequest.product_category)
}
void ProductRequest::set_product_category(const char* value, size_t size) {
  set_has_product_category();
  product_category_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RFQ.ProductRequest.product_category)
}
::std::string* ProductRequest::mutable_product_category() {
  set_has_product_category();
  // @@protoc_insertion_point(field_mutable:RFQ.ProductRequest.product_category)
  return product_category_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProductRequest::release_product_category() {
  // @@protoc_insertion_point(field_release:RFQ.ProductRequest.product_category)
  clear_has_product_category();
  return product_category_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProductRequest::set_allocated_product_category(::std::string* product_category) {
  if (product_category != NULL) {
    set_has_product_category();
  } else {
    clear_has_product_category();
  }
  product_category_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), product_category);
  // @@protoc_insertion_point(field_set_allocated:RFQ.ProductRequest.product_category)
}

// optional int32 quantity = 5;
bool ProductRequest::has_quantity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ProductRequest::set_has_quantity() {
  _has_bits_[0] |= 0x00000010u;
}
void ProductRequest::clear_has_quantity() {
  _has_bits_[0] &= ~0x00000010u;
}
void ProductRequest::clear_quantity() {
  quantity_ = 0;
  clear_has_quantity();
}
::google::protobuf::int32 ProductRequest::quantity() const {
  // @@protoc_insertion_point(field_get:RFQ.ProductRequest.quantity)
  return quantity_;
}
void ProductRequest::set_quantity(::google::protobuf::int32 value) {
  set_has_quantity();
  quantity_ = value;
  // @@protoc_insertion_point(field_set:RFQ.ProductRequest.quantity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProductResponse::kUnitPriceFieldNumber;
const int ProductResponse::kPriceValidationPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProductResponse::ProductResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_product_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RFQ.ProductResponse)
}
ProductResponse::ProductResponse(const ProductResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  price_validation_period_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_price_validation_period()) {
    price_validation_period_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_validation_period_);
  }
  unit_price_ = from.unit_price_;
  // @@protoc_insertion_point(copy_constructor:RFQ.ProductResponse)
}

void ProductResponse::SharedCtor() {
  _cached_size_ = 0;
  price_validation_period_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unit_price_ = 0;
}

ProductResponse::~ProductResponse() {
  // @@protoc_insertion_point(destructor:RFQ.ProductResponse)
  SharedDtor();
}

void ProductResponse::SharedDtor() {
  price_validation_period_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProductResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductResponse::descriptor() {
  protobuf_product_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_product_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ProductResponse& ProductResponse::default_instance() {
  protobuf_product_2eproto::InitDefaults();
  return *internal_default_instance();
}

ProductResponse* ProductResponse::New(::google::protobuf::Arena* arena) const {
  ProductResponse* n = new ProductResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProductResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RFQ.ProductResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_price_validation_period()) {
    GOOGLE_DCHECK(!price_validation_period_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*price_validation_period_.UnsafeRawStringPointer())->clear();
  }
  unit_price_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ProductResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RFQ.ProductResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float unit_price = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_unit_price();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &unit_price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string price_validation_period = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_price_validation_period()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->price_validation_period().data(), static_cast<int>(this->price_validation_period().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RFQ.ProductResponse.price_validation_period");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RFQ.ProductResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RFQ.ProductResponse)
  return false;
#undef DO_
}

void ProductResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RFQ.ProductResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float unit_price = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->unit_price(), output);
  }

  // optional string price_validation_period = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price_validation_period().data(), static_cast<int>(this->price_validation_period().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RFQ.ProductResponse.price_validation_period");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->price_validation_period(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RFQ.ProductResponse)
}

::google::protobuf::uint8* ProductResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RFQ.ProductResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float unit_price = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->unit_price(), target);
  }

  // optional string price_validation_period = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->price_validation_period().data(), static_cast<int>(this->price_validation_period().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RFQ.ProductResponse.price_validation_period");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->price_validation_period(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RFQ.ProductResponse)
  return target;
}

size_t ProductResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RFQ.ProductResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string price_validation_period = 2;
    if (has_price_validation_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->price_validation_period());
    }

    // optional float unit_price = 1;
    if (has_unit_price()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RFQ.ProductResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProductResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RFQ.ProductResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RFQ.ProductResponse)
    MergeFrom(*source);
  }
}

void ProductResponse::MergeFrom(const ProductResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RFQ.ProductResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_price_validation_period();
      price_validation_period_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.price_validation_period_);
    }
    if (cached_has_bits & 0x00000002u) {
      unit_price_ = from.unit_price_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProductResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RFQ.ProductResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductResponse::CopyFrom(const ProductResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RFQ.ProductResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductResponse::IsInitialized() const {
  return true;
}

void ProductResponse::Swap(ProductResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProductResponse::InternalSwap(ProductResponse* other) {
  using std::swap;
  price_validation_period_.Swap(&other->price_validation_period_);
  swap(unit_price_, other->unit_price_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProductResponse::GetMetadata() const {
  protobuf_product_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_product_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProductResponse

// optional float unit_price = 1;
bool ProductResponse::has_unit_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProductResponse::set_has_unit_price() {
  _has_bits_[0] |= 0x00000002u;
}
void ProductResponse::clear_has_unit_price() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProductResponse::clear_unit_price() {
  unit_price_ = 0;
  clear_has_unit_price();
}
float ProductResponse::unit_price() const {
  // @@protoc_insertion_point(field_get:RFQ.ProductResponse.unit_price)
  return unit_price_;
}
void ProductResponse::set_unit_price(float value) {
  set_has_unit_price();
  unit_price_ = value;
  // @@protoc_insertion_point(field_set:RFQ.ProductResponse.unit_price)
}

// optional string price_validation_period = 2;
bool ProductResponse::has_price_validation_period() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProductResponse::set_has_price_validation_period() {
  _has_bits_[0] |= 0x00000001u;
}
void ProductResponse::clear_has_price_validation_period() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProductResponse::clear_price_validation_period() {
  price_validation_period_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_price_validation_period();
}
const ::std::string& ProductResponse::price_validation_period() const {
  // @@protoc_insertion_point(field_get:RFQ.ProductResponse.price_validation_period)
  return price_validation_period_.GetNoArena();
}
void ProductResponse::set_price_validation_period(const ::std::string& value) {
  set_has_price_validation_period();
  price_validation_period_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RFQ.ProductResponse.price_validation_period)
}
#if LANG_CXX11
void ProductResponse::set_price_validation_period(::std::string&& value) {
  set_has_price_validation_period();
  price_validation_period_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RFQ.ProductResponse.price_validation_period)
}
#endif
void ProductResponse::set_price_validation_period(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_price_validation_period();
  price_validation_period_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RFQ.ProductResponse.price_validation_period)
}
void ProductResponse::set_price_validation_period(const char* value, size_t size) {
  set_has_price_validation_period();
  price_validation_period_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RFQ.ProductResponse.price_validation_period)
}
::std::string* ProductResponse::mutable_price_validation_period() {
  set_has_price_validation_period();
  // @@protoc_insertion_point(field_mutable:RFQ.ProductResponse.price_validation_period)
  return price_validation_period_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProductResponse::release_price_validation_period() {
  // @@protoc_insertion_point(field_release:RFQ.ProductResponse.price_validation_period)
  clear_has_price_validation_period();
  return price_validation_period_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProductResponse::set_allocated_price_validation_period(::std::string* price_validation_period) {
  if (price_validation_period != NULL) {
    set_has_price_validation_period();
  } else {
    clear_has_price_validation_period();
  }
  price_validation_period_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price_validation_period);
  // @@protoc_insertion_point(field_set_allocated:RFQ.ProductResponse.price_validation_period)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace RFQ

// @@protoc_insertion_point(global_scope)
